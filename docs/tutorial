This tutorial assumes that you have downloaded plink: 
	https://www.cog-genomics.org/plink2/
	
All commands should be called from the ldsc/ directory.

1. Estimating LD Scores
=======================

1.1 Single LD Scores
--------------------

$ python ldsc.py --bfile tutorial/plink --l2 --ld-wind-snp 10 --out tutorial/ld

This should run almost instantaneously, and will produce four files

(a) ld.l2.ldscore.gz -- LD Scores
(b) ld.l2.M -- # of SNPs in the .bed file
(c) ld.l2.M_5_50 -- # of SNPs with MAF between 5% and 50% in the .bed file
(d) ld.l2.log -- log file

The log file contains some useful summary information about your LD Scores. 

When estimating LD Scores from real data, it is advisable to parallelize
over chromosomes. 

You will get better results using --ld-wind-cm 1; however,
this requires a .bim file with centiMorgan coordinates. We provide a script
(interpolate_cm.py) which takes as input a .bim file and a SHAPEIT genetic map 
(see https://mathgen.stats.ox.ac.uk/genetics_software/shapeit/shapeit.html)
and produces a .bim file with the cM column filled in. This can also be accomplished 
via the --cm-map flag in plink.

1.2 Partitioned LD Scores
-------------------------

1.2.1 From annot matrix

The annot matrix in tutorial/ldsc.annot contains two annotations, even SNPs and odd
SNPs (this isn't a sensible thing to do with real data, just an example). 
You can compute even/odd partitioned LD Scores with the following command

$ python ldsc.py --bfile tutorial/plink --l2 --ld-wind-snp 10 --annot tutorial/ ldsc.annot --out ld

1.2.2 Binning continuous annotations

The file tutorial/one.cts contains a trivial continuous annotation correp

python ldsc.py --bfile plink --l2 --ld-wind-cm 1 --cts-bin cts.txt 
--cts-breaks 10,20 --cts-names ANNOT --out ld

python ldsc.py --bfile plink --l2 --ld-wind-cm 1 --cts-bin cts1.txt,cts2,txt 
--cts-breaks 10,20x10,40 --cts-names ANNOT1,ANNOT2 --out ld


2. Variance Components
======================

2.1 Summary Statistics
----------------------

2.1.1 Minimum Requirements
--------------------------

The minimum summary data required for estimating h2 or rg with LD Score 
regression are the following:

(1) Genome-wide summary statistics from cohorts with similar ancestry
(2) The summary statistics must be signed (allele and direction of effect) for rg 
	estimation. This is not necessary for h2 or partitioned h2 estimations. 
(3) The summary statistics should not be "corrected" via genomic control (GC) correction. 
	Using GC'ed summary statistics will result in downward bias in the LD Score regression 
	estimates of heritability and genetic covariance, and deflated LD Score regression
	intercepts. Estimates of genetic correlation will not be affected.
(4) The summary statistics should not be meta-analyzed with targeted genotyping at 
	significant loci  (e.g., specialty genotyping arrays like immunochip, exome chip, 
	psychchip, metabochip, or replication cohorts).	LD Score regression is currently not
	applicable to data generated using custom genotyping arrays 

The next details are convenient, but are only used for filtering SNPs, and so are not 
strictly necessary:

(1) A measure of imputation quality (e.g., INFO) for each SNP
(2) Sample size at each SNP (for binary traits, number of cases and number of controls)
(3) Sample MAF

Alternatively, one can simply share a list of SNPs passing reasonable MAF and INFO cutoffs
(usually sample MAF above 3% and INFO above 0.9).

If these data are not available, we recommend retaining only HM3 SNPs with reference panel
MAF above 3% for the LD Score regression as a workaround (note: for regression, not for 
estimation of the LD Scores), since HM3 SNPs seem to be well-imputed in most studies.

For newer studies with dense imputation, restricting to HM3 SNPs is an inefficient use of 
data. Using a larger set of SNPs for the regression will lower the standard error using 
all common 1kG SNPs instead of all common HM3 SNPs for the regression reduces the standard
error by about 10% in simulations).

2.1.2 Reformatting Summary Statistics 
-------------------------------------

python sumstats_to_chisq.py --sumstats plink.qassoc --N 1000 --out test



2.2 Heritability
----------------

2.2.1 Univariate Heritability

python ldsc.py --h2 sumstats.chisq.gz --w-ld-chr w_ld --ref-ld-chr ld --out h2

2.2.2 Partitioned Heritability

python ldsc.py --h2 sumstats.chisq.gz --w-ld-chr w_ld --ref-ld-chr part_ld --out h2

2.2.3 Partitioned Heritability with Overlapping Categories

python ldsc.py --h2 sumstats.chisq.gz --w-ld-chr w_ld --ref-ld-chr overlap_ld --overlap-annot 
--out h2 

2.2.4 Adding Categories to the Baseline Model from Finucane, et al

2.2.5 Constraining the Intercept 

To constrain the intercept to equal 1, simply append --no-intercept to any of the above
commands. To constrain the intercept to a number different from one, say 0.9, append
--constrain-intercept 0.9 to any of the above commands.

WARNING: only constrain the intercept if you trust the QC. LD Score regression with
constrained intercept is not protected from population stratification or cryptic 
relatedness. However, PCA provides much better protection from population stratification
than the LD Score regression intercept does.

WARNING: do NOT constrain the intercept to one when working with GC corrected data.
For GC corrected data, the expected intercept is less than one (see the Supplementary
Note of Bulik-Sullivan et al 2014).

2.3 Genetic Correlation
-----------------------

2.3.1 Basic Genetic Correlation

python ldsc.py --rg sumstats1,sumstats2 --w-ld-chr w_ld --ref-ld-chr overlap_ld --out rg 

2.3.2 Modifying the Regression Weights for Overlapping Samples

python ldsc.py --rg sumstats1,sumstats2 --w-ld-chr w_ld --ref-ld-chr overlap_ld --out rg 
--overlap 10000 --rho 0.4

2.3.2 Constraining the Intercept

To constrain the intercepts to equal 1,1,0, simply append --no-intercept to any of the above
commands. To constrain the intercepts to a different set of numbers, say 1,1,4000, then 
append --constrain-intercept 1,1,4000 to the above commands.

NOTE: Constraining the intercept will not automatically set the regression weights 
properly. In the above example with 10000 overlapping samples and a phenotypic correlation
of 0.4, the full command should be 

python ldsc.py --rg sumstats1,sumstats2 --w-ld-chr w_ld --ref-ld-chr overlap_ld --out rg
--overlap 10000 --rho 0.4 --constrain-intercept 1,1,4000
